//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.12.22 at 10:15:36 PM PST 
//


package binji.demo.data.entities.ovd;

import java.time.Instant;
import java.util.Map;
import java.util.Set;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.MapKeyColumn;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import binji.demo.data.entities.BaseEntity;
import lombok.Getter;
import lombok.Setter;

/**
 * @author jesse keane
 *
 */
@Getter
@Setter
@Entity
@Table(name = "ovd_fullvideos")
@SequenceGenerator(name="id_gen", sequenceName="ovd_fullvideos_seq")
public class OvdFullVideoEntity extends BaseEntity {
	
	@Basic
	@Column(name = "video_id")
    private String videoId;
    
    @ManyToOne(fetch = FetchType.LAZY, optional = true)
	@JoinColumn(name = "ovd_provider_id", referencedColumnName = "id")    
    private OvdProviderEntity ovdProvider;
    
    @Basic
	@Column(name = "studio_name", columnDefinition="TEXT")
    private String studioName;
    
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "fullVideo")	
	private Set<OvdUrlEntity> urls;
    
    @Basic
	@Column(name = "duration")
    private Integer duration;
   
    @Basic
	@Column(name = "availableFromDateTime", columnDefinition="timestamptz")
    private Instant availableFromDateTime;
    
    @Basic
	@Column(name = "expiresAtDateTime", columnDefinition="timestamptz")
    private Instant expiresAtDateTime;
   
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "fullVideo")	
    private Set<OvdViewingOptionEntity> viewingOptions;
    
    @ElementCollection
	@MapKeyColumn(name = "ovd_data_key")
	@Column(name = "ovd_data_value")
	@CollectionTable(name = "ovd_data", joinColumns=@JoinColumn(name = "ovd_data_id"))
	private Map<String, String> additionalData;
    
    @ManyToOne(fetch = FetchType.LAZY, optional = false)
	@JoinColumn(name = "content_id", referencedColumnName = "id")
	private OvdContentEntity content;
    
    // quick hack since dont know if querydsl can query against map<string, string> correctly
 	@Basic
 	@Column(name="airtime")
 	private String airTimeForSort;
 	
    
    /**
	 * Explicit setter to maintain relationship
	 */
	public void setViewingOptions(Set<OvdViewingOptionEntity> viewingOptions) {	
		if (viewingOptions != null) {
			this.viewingOptions = viewingOptions;
			viewingOptions.forEach(x -> x.setFullVideo(this));
		}
	}
	
	/**
	 * Explicit setter to maintain relationship
	 */
	public void setUrls(Set<OvdUrlEntity> urls) {	
		if (urls != null) {
			this.urls = urls;
			urls.forEach(x -> x.setFullVideo(this));
		}
	}
    
}